legend("topright", legend = c("Borne supérieur","Droite de régression", "Borne inférieur"), col = c("purple", "yellow", "blue"), lwd = 2)
rm(list=ls())
# Chargement du jeu de données
ozone = read.table(file = "Dataset_ozone.txt", sep = ";", header = TRUE, dec = ",")
# Attribution des variables réponse et explicatives
Y = ozone$maxO3
X = ozone$T12
#Calcul des moyennes empiriques
X_bar = mean(X)
Y_bar = mean(Y)
#Calcul de beta1 et beta0
beta1_manuel <- sum((X - X_bar) * (Y - Y_bar)) / sum((X - X_bar)^2)
beta0_manuel <- Y_bar - beta1_manuel * X_bar
#Calcul du modèle de régression linéaire
y = beta0_manuel + beta1_manuel*X
plot(X, Y, main = "Régression linéaire entre la valeur maximale d'ozone et la température relevée à 12H", ylab = "Max03 : valeur maximale d'ozone par jour", xlab = "T12 : Température relevée à 12H")
lines(X, y, col = 'red', lwd = 2)
legend("topright", legend = "Droite de régression", col = "red", lwd = 2)
#Calcul de la régression linéaire à l'aide de la commande lm
prediction = lm(Y ~ X, data = ozone)
#On récupère les coefficients beta0 et beta1 contenus dans la liste que génère la commande lm
beta0_lm = coef(prediction)[1]
beta1_lm = coef(prediction)[2]
#Calcul du modèle de régression linéaire avec les coefficients obtenus avec lm
y_lm = beta0_lm + beta1_lm*X
plot(X, Y, main = "Régression linéaire entre la valeur maximale d'ozone et la température relevée à 12H", ylab = "Max03 : valeur maximale d'ozone par jour", xlab = "T12 : Température relevée à 12H")
lines(X, y_lm, col = 'green', lwd = 2)
legend("topright", legend = "Droite de régression", col = "green", lwd = 2)
# Calcul des estimateurs
beta_1barre = sum((X - X_bar) * (Y - Y_bar)) / sum((X - X_bar)^2)
beta_0barre = Y_bar - beta_1barre*X_bar
#Calcul de \hat{Y}
hatY = beta_0barre + beta_1barre*X
#Calcul du numérateur et dénominateur
SSE = sum((hatY-Y_bar)^2)
SST = sum((Y-Y_bar)^2)
#Calcul de R2
R2_manuel = SSE/SST
cat("R2 : ", R2_manuel)
prediction = lm(Y~X, data = ozone)
R2_lm = summary.lm(prediction)$r.squared
cat("R2 : ", R2_lm)
n = length(Y)
# On définit alpha = 0.05 pour avoir un intervalle de confiance à 95%
alpha = 0.05
#Fonction qt pour le quantile d'une loi de Student a n-2 degrés de liberté
t = qt(1-alpha/2, n-2)
#Calcul du \hat{\sigma}
hat_sigma = sqrt(sum((Y-beta0_manuel - beta1_manuel*X)^2)/(n-2))
#Calcul de l'intervalle de confiance
interv = t*hat_sigma * sqrt(1+(1/n)+(X-mean(X))^2/(n*sx_2))
n = length(Y)
# On définit alpha = 0.05 pour avoir un intervalle de confiance à 95%
alpha = 0.05
#Fonction qt pour le quantile d'une loi de Student a n-2 degrés de liberté
t = qt(1-alpha/2, n-2)
#Calcul du \hat{\sigma}
hat_sigma = sqrt(sum((Y-beta0_manuel - beta1_manuel*X)^2)/(n-2))
#Calcul de l'intervalle de confiance
interv = t*hat_sigma *sqrt(1 + (1/n) + (X-mean(X))/(sum((X-mean(X))^2)))
borneInf = beta_0barre + beta_1barre*X - interv
borneSup = beta_0barre + beta_1barre*X + interv
#Représentation graphique
plot(X,Y, main = "Intervalles de confiance pour Y à 95%", ylab = "Max03 : valeur maximale d'ozone par jour", xlab = "T12 : Température relevée à 12H")
lines(X, y_lm, col = 'yellow', lwd = 2)
curve(beta_0barre + beta_1barre*x - t*hat_sigma*sqrt(1 + (1/n) + (x-mean(X))/(sum((x-mean(X))^2))), from=min(X), to=max(X), col="blue", add=TRUE, lwd = 2)
curve(beta_0barre + beta_1barre*x + t*hat_sigma*sqrt(1 + (1/n) + (x-mean(X))/(sum((x-mean(X))^2))), from=min(X), to=max(X), col="purple", add=TRUE, lwd = 2)
legend("topright", legend = c("Borne supérieur","Droite de régression", "Borne inférieur"), col = c("purple", "yellow", "blue"), lwd = 2)
prediction = lm(Y~X, data = ozone)
summary(prediction)
plot(prediction)
par(mfrow = c(2,2))
plot(prediction)
par(mfrow = c(2,2))
plot(prediction)
saphiro.test(prediction$residuals)
par(mfrow = c(2,2))
plot(prediction)
saphiro.test(prediction$residuals)
saphiro.test(prediction$residuals)
shapiro.test(prediction$residuals)
knitr::opts_chunk$set(echo = TRUE)
ijaz cpjéd^blézx$er ầçi IÉJ"O I$Ç"RÙKSDOJAOJÉPXKKàçisdndknnok&é` zeok,snqs$v qf azegf uezf
help(rnorm)
rm(list=ls(())
rm(list=ls())
help(rexp)
M = 1000
n = 4
mu = 3
a = rexp(n = n, rate = 1/mu)
n = 4
M = 1000
n = 4
mu = 3
a = rexp(n = M*n, rate = 1/mu)
a.muhat= apply(x, 2, mean)
a.muhat= apply(a, 2, mean)
a.muhat= apply(a, 2, rate = 1/mu)
a.muhat= apply(a, 2, mean)
help(apply)
# Set parameters
M <- 1000
n_values <- seq(4, 1000, by = 1)
mu <- 3
# Step 1: Simulate M sequences of n random samples from an exponential distribution
set.seed(123)  # for reproducibility
data_matrix <- matrix(rexp(M * max(n_values), rate = mu), ncol = max(n_values))
# Function to compute the mean
compute_mean <- function(x) {
return(sum(x) / length(x))
}
# Step 2: Compute M times the maximum likelihood estimate µˆ
mle_estimates <- apply(data_matrix[, 1:max(n_values)], 2, compute_mean)
# Step 2: Compute M times the maximum likelihood estimate µˆ
mle_estimates <- apply(data_matrix[, 1:max(n_values)], 2, compute_mean)
mle_estimates
# Step 3: Plot the empirical probability density function ˆf(ˆµ) of µˆ
plot_density <- function(estimates, title) {
x_range <- seq(min(estimates), max(estimates), length.out = 100)
density_values <- numeric(length(x_range))
for (i in seq_along(estimates)) {
density_values <- density_values + dnorm(x_range, mean = estimates[i], sd = sd(estimates))
}
density_values <- density_values / length(estimates)
plot(x_range, density_values, type = 'l', col = 'blue', xlab = expression(hat(mu)),
ylab = 'Density', main = title)
}
plot_density(mle_estimates, "Empirical Probability Density Function of MLE Estimates")
# Step 4: Study the behavior of ˆf(ˆµ) when n is increasing from n = 4 to n = 1000
for (n in n_values) {
mle_estimates_n <- apply(data_matrix[, 1:n], 2, compute_mean)
plot_density(mle_estimates_n, paste("Behavior of ˆf(ˆµ) as n =", n))
}
# Set parameters
M <- 1000
n <- seq(4, 1000, by = 1)
mu <- 3
# Step 1: Simulate M sequences of n random samples from an exponential distribution
data_matrix <- matrix(rexp(M * max(n), rate = mu), ncol = max(n))
# Function to compute the mean
compute_mean <- function(x) {
return(sum(x) / length(x))
}
# Step 2: Compute M times the maximum likelihood estimate µˆ
mle_estimates <- apply(data_matrix[, 1:max(n)], 2, compute_mean)
mle_estimates
# Step 3: Plot the empirical probability density function ˆf(ˆµ) of µˆ
plot_density <- function(estimates, title) {
x_range <- seq(min(estimates), max(estimates), length.out = 100)
density_values <- numeric(length(x_range))
for (i in seq_along(estimates)) {
density_values <- density_values + dnorm(x_range, mean = estimates[i], sd = sd(estimates))
}
density_values <- density_values / length(estimates)
plot(x_range, density_values, type = 'l', col = 'blue', xlab = expression(hat(mu)),
ylab = 'Density', main = title)
}
plot_density(mle_estimates, "Empirical Probability Density Function of MLE Estimates")
# Step 3: Plot the empirical probability density function f(µ) of µ
plot_density <- function(estimates, title) {
x_range <- seq(min(estimates), max(estimates), length.out = 100)
density_values <- numeric(length(x_range))
for (i in seq_along(estimates)) {
density_values <- density_values + dnorm(x_range, mean = estimates[i], sd = sd(estimates))
}
density_values <- density_values / length(estimates)
plot(x_range, density_values, type = 'l', col = 'blue', xlab = expression(hat(mu)),
ylab = 'Density', main = title)
}
plot_density(mle_estimates, "Empirical Probability Density Function of MLE Estimates")
# Step 2: Compute M times the maximum likelihood estimate µˆ
mle_estimates <- apply(data_matrix[, 1:max(n)], 2, compute_mean)
head(mle_estimates)
tail(mle_estimates)
setwd("~/Bureau/Polytech/MAM4/Informatique/SériesTemporelles/TP1")
## Exercice 2
```{r}
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
load(data1.RData)
load("data1.RData")
load("data1.RData")
data = khct.df
## Question 2
```{r}
pairs(data)
help(pairs)
View(khct.df)
View(khct.df)
load("/home/lelio/Bureau/Polytech/MAM4/Informatique/SériesTemporelles/TP1/data1.RData")
data = data[1:168,]
data = data[1:168,]
Y = sqrt(data$kwh)
X = c(data$htdd, data$cldd)
data = data[1:168,]
Y = sqrt(data$kwh)
X = c(data$htdd, data$cldd)
X = matrix(X, nrow = 2, nrow = 1)
load("data1.RData")
data = khct.df
pairs(data)
data = data[1:168,]
Y = sqrt(data$kwh)
X = c(data$htdd, data$cldd)
data = data[1:168,]
Y = sqrt(data$kwh)
X = data$htdd + data$cldd
data = data[1:168,]
Y = sqrt(data$kwh)
X = cbind(data$htdd, data$cldd)
View(X)
data = data[1:168,]
Y = sqrt(data$kwh)
X = cbind(data$htdd, data$cldd)
prediction = lm(Y ~ X, data = data)
#On récupère les coefficients beta0 et beta1 contenus dans la liste que génère la commande lm
beta0_lm = coef(prediction)[1]
beta1_lm = coef(prediction)[2]
#Calcul du modèle de régression linéaire avec les coefficients obtenus avec lm
y_lm = beta0_lm + beta1_lm*X
plot(X, Y, main = "Régression linéaire entre la valeur maximale d'ozone et la température relevée à 12H", ylab = "Max03 : valeur maximale d'ozone par jour", xlab = "T12 : Température relevée à 12H")
data = data[1:168,]
Y = sqrt(data$kwh)
X1 = data$htdd
X2 = data$cldd
prediction = lm(Y ~ X1 + X2, data = data)
#On récupère les coefficients beta0 et beta1 contenus dans la liste que génère la commande lm
beta0_lm = coef(prediction)[1]
beta1_lm = coef(prediction)[2]
#Calcul du modèle de régression linéaire avec les coefficients obtenus avec lm
y_lm = beta0_lm + beta1_lm*X
plot(X, Y, main = "Régression linéaire entre la valeur maximale d'ozone et la température relevée à 12H", ylab = "Max03 : valeur maximale d'ozone par jour", xlab = "T12 : Température relevée à 12H")
coef(prediction)
data = data[1:168,]
Y = sqrt(data$kwh)
X1 = data$htdd
X2 = data$cldd
prediction = lm(Y ~ X1 + X2, data = data)
#On récupère les coefficients beta0 et beta1 contenus dans la liste que génère la commande lm
beta0_lm = coef(prediction)[1]
beta1_lm = coef(prediction)[2]
beta2_lm = coef(prediction)[3]
#Calcul du modèle de régression linéaire avec les coefficients obtenus avec lm
y_lm = beta0_lm + beta1_lm*X1 + beta2_lm*X2
plot(X, Y, main = "Régression linéaire entre la valeur maximale d'ozone et la température relevée à 12H", ylab = "Max03 : valeur maximale d'ozone par jour", xlab = "T12 : Température relevée à 12H")
data = data[1:168,]
Y = sqrt(data$kwh)
X1 = data$htdd
X2 = data$cldd
prediction = lm(Y ~ X1 + X2, data = data)
#On récupère les coefficients beta0 et beta1 contenus dans la liste que génère la commande lm
beta0_lm = coef(prediction)[1]
beta1_lm = coef(prediction)[2]
beta2_lm = coef(prediction)[3]
#Calcul du modèle de régression linéaire avec les coefficients obtenus avec lm
y_lm = beta0_lm + beta1_lm*X1 + beta2_lm*X2
plot(X1, Y, main = "Régression linéaire entre la valeur maximale d'ozone et la température relevée à 12H", ylab = "Max03 : valeur maximale d'ozone par jour", xlab = "T12 : Température relevée à 12H")
lines(X1, y_lm, col = 'green', lwd = 2)
legend("topright", legend = "Droite de régression", col = "green", lwd = 2)
data = data[1:168,]
Y = sqrt(data$kwh)
X1 = data$htdd
X2 = data$cldd
prediction = lm(Y ~ X1 + X2, data = data)
#On récupère les coefficients beta0 et beta1 contenus dans la liste que génère la commande lm
beta0_lm = coef(prediction)[1]
beta1_lm = coef(prediction)[2]
beta2_lm = coef(prediction)[3]
#Calcul du modèle de régression linéaire avec les coefficients obtenus avec lm
y_lm = beta0_lm + beta1_lm*X1 + beta2_lm*X2
plot(data$t1, Y, main = "Régression linéaire entre la valeur maximale d'ozone et la température relevée à 12H", ylab = "Max03 : valeur maximale d'ozone par jour", xlab = "T12 : Température relevée à 12H")
lines(data$t1, y_lm, col = 'green', lwd = 2)
legend("topright", legend = "Droite de régression", col = "green", lwd = 2)
data = data[1:168,]
Y = sqrt(data$kwh)
X1 = data$htdd
X2 = data$cldd
X3 = data$t1
t2 = (data$t1-1977)^2
X4 = data$t2
prediction = lm(Y ~ X1 + X2, data = data)
#On récupère les coefficients beta0 et beta1 contenus dans la liste que génère la commande lm
beta0_lm = coef(prediction)[1]
beta1_lm = coef(prediction)[2]
beta2_lm = coef(prediction)[3]
#Calcul du modèle de régression linéaire avec les coefficients obtenus avec lm
y_lm = beta0_lm + beta1_lm*X1 + beta2_lm*X2
data = data[1:168,]
Y = sqrt(data$kwh)
X1 = data$htdd
X2 = data$cldd
X3 = data$t1
t2 = (data$t1-1977)^2
X4 = t2
prediction = lm(Y ~ X1 + X2, data = data)
#On récupère les coefficients beta0 et beta1 contenus dans la liste que génère la commande lm
beta0_lm = coef(prediction)[1]
beta1_lm = coef(prediction)[2]
beta2_lm = coef(prediction)[3]
#Calcul du modèle de régression linéaire avec les coefficients obtenus avec lm
y_lm = beta0_lm + beta1_lm*X1 + beta2_lm*X2
data = data[1:168,]
Y = sqrt(data$kwh)
X1 = data$htdd
X2 = data$cldd
X3 = data$t1
X4 = (data$t1-1977)^2
prediction = lm(Y ~ X1 + X2, data = data)
#On récupère les coefficients beta0 et beta1 contenus dans la liste que génère la commande lm
beta0_lm = coef(prediction)[1]
beta1_lm = coef(prediction)[2]
beta2_lm = coef(prediction)[3]
#Calcul du modèle de régression linéaire avec les coefficients obtenus avec lm
y_lm = beta0_lm + beta1_lm*X1 + beta2_lm*X2
data = data[1:168,]
Y = sqrt(data$kwh)
X1 = data$htdd
X2 = data$cldd
X3 = data$t1
X4 = (data$t1-1977)^2
prediction = lm(Y ~ X1 + X2 + X3 + X4, data = data)
#On récupère les coefficients beta0 et beta1 contenus dans la liste que génère la commande lm
beta0_lm = coef(prediction)[1]
beta1_lm = coef(prediction)[2]
beta2_lm = coef(prediction)[3]
beta3_lm = coef(prediction)[4]
beta4_lm = coef(prediction)[5]
#Calcul du modèle de régression linéaire avec les coefficients obtenus avec lm
y_lm = beta0_lm + beta1_lm*X1 + beta2_lm*X2 + beta3_lm*X3 + beta4_lm*X4
data = data[1:168,]
Y = sqrt(data$kwh)
X1 = data$htdd
X2 = data$cldd
X3 = data$t1
X4 = (data$t1-1977)^2
prediction = lm(Y ~ X1 + X2 + X3 + X4, data = data)
#On récupère les coefficients beta0 et beta1 contenus dans la liste que génère la commande lm
beta0_lm = coef(prediction)[1]
beta1_lm = coef(prediction)[2]
beta2_lm = coef(prediction)[3]
beta3_lm = coef(prediction)[4]
beta4_lm = coef(prediction)[5]
#Calcul du modèle de régression linéaire avec les coefficients obtenus avec lm
y_lm = beta0_lm + beta1_lm*X1 + beta2_lm*X2 + beta3_lm*X3 + beta4_lm*X4
plot(data$t1, Y, main = "Régression linéaire entre la valeur maximale d'ozone et la température relevée à 12H", ylab = "Max03 : valeur maximale d'ozone par jour", xlab = "T12 : Température relevée à 12H")
lines(data$t1, y_lm, col = 'green', lwd = 2)
legend("topright", legend = "Droite de régression", col = "green", lwd = 2)
data = data[1:168,]
Y = sqrt(data$kwh)
X1 = data$htdd
X2 = data$cldd
prediction = lm(Y ~ X1 + X2, data = data)
#On récupère les coefficients beta0 et beta1 contenus dans la liste que génère la commande lm
beta0_lm = coef(prediction)[1]
beta1_lm = coef(prediction)[2]
beta2_lm = coef(prediction)[3]
#Calcul du modèle de régression linéaire avec les coefficients obtenus avec lm
y_lm = beta0_lm + beta1_lm*X1 + beta2_lm*X2
plot(data$t1, Y, main = "Régression linéaire multiple la racine du kwh et cldd+htdd", ylab = "KWH", xlab = "Temps en années")
lines(data$t1, y_lm, col = 'red', lwd = 2)
legend("topright", legend = "Régression multiple", col = "red", lwd = 2)
data = data[1:168,]
Y = sqrt(data$kwh)
X1 = data$htdd
X2 = data$cldd
X3 = data$t1
X4 = (data$t1-1977)^2
prediction = lm(Y ~ X1 + X2 + X3 + X4, data = data)
#On récupère les coefficients beta0 et beta1 contenus dans la liste que génère la commande lm
beta0_lm = coef(prediction)[1]
beta1_lm = coef(prediction)[2]
beta2_lm = coef(prediction)[3]
beta3_lm = coef(prediction)[4]
beta4_lm = coef(prediction)[5]
#Calcul du modèle de régression linéaire avec les coefficients obtenus avec lm
y_lm = beta0_lm + beta1_lm*X1 + beta2_lm*X2 + beta3_lm*X3 + beta4_lm*X4
plot(data$t1, Y, main = "Régression linéaire multiple la racine du kwh et cldd+htdd+t1+t2=(t1-1977)²", xlab = "Temps en années", ylab = "KWH")
lines(data$t1, y_lm, col = 'lightgreen', lwd = 2)
legend("topright", legend = "Régression multiple", col = "lightgreen", lwd = 2)
data = data[1:168,]
Y = sqrt(data$kwh)
X1 = data$htdd
X2 = data$cldd
X3 = data$t1
X4 = (data$t1-1977)^2
prediction = lm(Y ~ X1 + X2 + X3 + X4, data = data)
#On récupère les coefficients beta0 et beta1 contenus dans la liste que génère la commande lm
beta0_lm = coef(prediction)[1]
beta1_lm = coef(prediction)[2]
beta2_lm = coef(prediction)[3]
beta3_lm = coef(prediction)[4]
beta4_lm = coef(prediction)[5]
#Calcul du modèle de régression linéaire avec les coefficients obtenus avec lm
y_lm = beta0_lm + beta1_lm*X1 + beta2_lm*X2 + beta3_lm*X3 + beta4_lm*X4
plot(data$t1, Y, main = "Régression linéaire multiple la racine du kwh et cldd+htdd+t1+t2=(t1-1977)²", xlab = "Temps en années", ylab = "KWH")
lines(data$t1, y_lm, col = 'lightgreen', lwd = 3)
legend("topright", legend = "Régression multiple", col = "lightgreen", lwd = 3)
data = data[1:168,]
Y = sqrt(data$kwh)
X1 = data$htdd
X2 = data$cldd
prediction = lm(Y ~ X1 + X2, data = data)
#On récupère les coefficients beta0 et beta1 contenus dans la liste que génère la commande lm
beta0_lm = coef(prediction)[1]
beta1_lm = coef(prediction)[2]
beta2_lm = coef(prediction)[3]
#Calcul du modèle de régression linéaire avec les coefficients obtenus avec lm
y_lm = beta0_lm + beta1_lm*X1 + beta2_lm*X2
plot(data$t1, Y, main = "Régression linéaire multiple la racine du kwh et cldd+htdd", ylab = "KWH", xlab = "Temps en années")
lines(data$t1, y_lm, col = 'red', lwd = 3)
legend("topright", legend = "Régression multiple", col = "red", lwd = 3)
data = data[169:180,]
Y = sqrt(data$kwh)
X1 = data$htdd
X2 = data$cldd
X3 = data$t1
X4 = (data$t1-1977)^2
prediction = lm(Y ~ X1 + X2 + X3 + X4, data = data)
data = data[169:180,]
Y = sqrt(data$kwh)
X1 = data$htdd
X2 = data$cldd
X3 = data$t1
X4 = (data$t1-1977)^2
prediction = lm(Y ~ X1 + X2 + X3 + X4, data = data)
View(data)
rm(list=ls())
load("data1.RData")
data = khct.df
data = data[169:180,]
Y = sqrt(data$kwh)
X1 = data$htdd
X2 = data$cldd
X3 = data$t1
X4 = (data$t1-1977)^2
prediction = lm(Y ~ X1 + X2 + X3 + X4, data = data)
#On récupère les coefficients beta0 et beta1 contenus dans la liste que génère la commande lm
beta0_lm = coef(prediction)[1]
beta1_lm = coef(prediction)[2]
beta2_lm = coef(prediction)[3]
beta3_lm = coef(prediction)[4]
beta4_lm = coef(prediction)[5]
#Calcul du modèle de régression linéaire avec les coefficients obtenus avec lm
y_lm = beta0_lm + beta1_lm*X1 + beta2_lm*X2 + beta3_lm*X3 + beta4_lm*X4
plot(data$t1, Y, main = "Régression linéaire multiple la racine du kwh et cldd+htdd+t1+t2=(t1-1977)²", xlab = "Temps en années", ylab = "KWH")
lines(data$t1, y_lm, col = 'lightgreen', lwd = 3)
legend("topright", legend = "Régression multiple", col = "lightgreen", lwd = 3)
rm(list=ls())
load("data1.RData")
data = khct.df
data = data[169:180,]
Y = sqrt(data$kwh)
X1 = data$htdd
X2 = data$cldd
X3 = data$t1
X4 = (data$t1-1977)^2
prediction = lm(Y ~ X1 + X2 + X3 + X4, data = data)
#On récupère les coefficients beta0 et beta1 contenus dans la liste que génère la commande lm
beta0_lm = coef(prediction)[1]
beta1_lm = coef(prediction)[2]
beta2_lm = coef(prediction)[3]
beta3_lm = coef(prediction)[4]
beta4_lm = coef(prediction)[5]
#Calcul du modèle de régression linéaire avec les coefficients obtenus avec lm
y_lm = beta0_lm + beta1_lm*X1 + beta2_lm*X2 + beta3_lm*X3 + beta4_lm*X4
plot(data$t1, Y, main = "Régression linéaire multiple la racine du kwh et cldd+htdd+t1+t2=(t1-1977)²", xlab = "Temps en années", ylab = "KWH")
lines(data$t1, y_lm, col = 'lightgreen', lwd = 3)
legend("topright", legend = "Régression multiple", col = "lightgreen", lwd = 3)
rm(list=ls())
load("data1.RData")
data = khct.df
data = data[169:180,]
Y = sqrt(data$kwh)
X1 = data$htdd
X2 = data$cldd
X3 = data$t1
X4 = (data$t1-1977)^2
prediction = lm(Y ~ X1 + X2 + X3 + X4, data = data)
#On récupère les coefficients beta0 et beta1 contenus dans la liste que génère la commande lm
beta0_lm = coef(prediction)[1]
beta1_lm = coef(prediction)[2]
beta2_lm = coef(prediction)[3]
beta3_lm = coef(prediction)[4]
beta4_lm = coef(prediction)[5]
#Calcul du modèle de régression linéaire avec les coefficients obtenus avec lm
y_lm = beta0_lm + beta1_lm*X1 + beta2_lm*X2 + beta3_lm*X3 + beta4_lm*X4
plot(data$t1, Y, main = "Régression linéaire multiple la racine du kwh et cldd+htdd+t1+t2=(t1-1977)²", xlab = "Temps en mois pour l'année 1984", ylab = "KWH")
lines(data$t1, y_lm, col = 'lightgreen', lwd = 3)
legend("topright", legend = "Régression multiple", col = "lightgreen", lwd = 3)
legend("topright", legend = "Régression multiple", col = "lightblue", lwd = 3)
rm(list=ls())
load("data1.RData")
data = khct.df
data = data[169:180,]
Y = sqrt(data$kwh)
X1 = data$htdd
X2 = data$cldd
X3 = data$t1
X4 = (data$t1-1977)^2
prediction = lm(Y ~ X1 + X2 + X3 + X4, data = data)
#On récupère les coefficients beta0 et beta1 contenus dans la liste que génère la commande lm
beta0_lm = coef(prediction)[1]
beta1_lm = coef(prediction)[2]
beta2_lm = coef(prediction)[3]
beta3_lm = coef(prediction)[4]
beta4_lm = coef(prediction)[5]
#Calcul du modèle de régression linéaire avec les coefficients obtenus avec lm
y_lm = beta0_lm + beta1_lm*X1 + beta2_lm*X2 + beta3_lm*X3 + beta4_lm*X4
plot(data$t1, Y, main = "Régression linéaire multiple la racine du kwh et cldd+htdd+t1+t2=(t1-1977)²", xlab = "Temps en mois pour l'année 1984", ylab = "KWH")
lines(data$t1, y_lm, col = 'lightblue', lwd = 3)
legend("topright", legend = "Régression multiple", col = "lightblue", lwd = 3)
